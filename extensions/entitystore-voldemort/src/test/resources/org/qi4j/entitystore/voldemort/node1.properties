#
# Copyright (c) 2010 Niclas Hedhman <niclas@hedhman.org>.
#
# Licensed  under the  Apache License,  Version 2.0  (the "License");
# you may not use  this file  except in  compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed  under the  License is distributed on an "AS IS" BASIS,
# WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
# implied.
#
# See the License for the specific language governing permissions and
# limitations under the License.
#

#  The unique, sequential identifier for this server in the cluster (starts with 0)
#  default: none, must be specfified
node.id=1

# The base directory for voldemort. Can also be specified via the environment variable VOLDEMORT_HOME or
# via a command line option.
# default: none
# voldemort.home=

# The directory where voldemort data is stored
# default: ${voldemort.home}/data
# data.directory=


# The directory where voldemort configuration is stored
# default: ${voldemort.home}/config
# metadata.directory=

# Should the BDB engine be enabled?
# default: true
# enable.bdb.engine=


# The BDB cache that is shared by all BDB tables. Bigger is better.
# default: 200MB (make it bigger!!!)
bdb.cache.size=50000000


# Should transactions be immediately written to disk?
# default: false
# bdb.write.transactions=

# When the transaction has been written to disk should we force the disk to flush the OS cache. This is a fairly expensive operation.
# default: false
# bdb.flush.transactions=


# The directory where the BDB environment is located
# default: ${data.directory}/bdb
# bdb.data.directory=


# The size of an individual log file
# default: 1GB
# bdb.max.logfile.size=


# The fanout size for the btree. Bigger fanout more effienciently supports larger btrees.
# default: 512
# bdb.btree.fanout=


# How often (in bytes) should we checkpoint the transaction log? Checkpoints make startup and shutdown faster.
# default: 20 * 1024 * 1024
# bdb.checkpoint.interval.bytes=


# How often in ms should we checkpoint the transaction log
# default: 30000
# bdb.checkpoint.interval.ms=


# Should we enabled the mysql storage engine? Doing so will create a connection pool that will be used for the mysql instance
# default: false
# enable.mysql.engine=


# The mysql username to user
# default: root
# mysql.user=


# The mysql password to user
# mysql.password=


# The host of the mysql instance
# default: localhost
# mysql.host=


# The port of the mysql instance
# default: 3306
# mysql.port=


# The name of the mysql database
# default: voldemort
# mysql.database=


#Should we enable the memory storage engine? Might as well this takes no resources and is just here for consistency.
# default: true
# enable.memory.engine=


# Should we enable the cache storage engine? Might as well this takes no resources and is just here for consistency.
# default: true
# enable.cache.engine=


# Should we enable the readonly storage engine?
# default: false
# enable.readonly.engine=


# The maximum time to wait to acquire a filehandle to perform reads.
# default: 4000
# readonly.file.wait.timeout.ms=


# The number of backup copies of the data to keep around for rollback.
# default: 1
# readonly.backups=


# The number of file descriptors to pool per store.
# default: 5
# readonly.file.handles=


# The directory in which to store readonly data files.
# default: ${data.directory}/read-only
# readonly.data.directory=


# What storage engine should we use for storing misdelivered messages that need to be rerouted?
# default: bdb
# slop.store.engine=


# The maximum number of threads the server can use.
# default: 100
# max.threads=


# The number of threads to keep alive even when idle.
# default: max(1, ${max.threads} / 2)
# core.threads=


# The socket SO_TIMEOUT. Essentially the amount of time to block on a low-level network operation before throwing an error.
# default: 4000
# socket.timeout.ms=


# The total amount of time to wait for adequate responses from all nodes before throwing an error.
# default: 5000
# routing.timeout.ms=


# Enable the HTTP data server?
# default: true
# http.enable=


# Enable the socket data server?
# default: true
# socket.enable=


# Enable JMX monitoring?
# default: true
# jmx.enable=


# Enable detection of misdelivered messages for persistence and redelivery.
# default: false
# slop.detection.enable=


# Log every operation on all stores.
# default: true
# enable.verbose.logging=


# Track load statistics on the stores.
# default: true
# enable.stat.tracking=


# How often should misdelivered "slop" data be pushed out to nodes?
# default: 2 * 60 * 1000
# pusher.poll.ms=


# The number of threads to use for scheduling periodic jobs
# default: 3
# scheduler.threads=
