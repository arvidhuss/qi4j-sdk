description = "Conversion of the DDDsample project on SourceForge, converted to Qi4j."

jar { manifest { name = "Qi4j Sample - DDD Sample, take 1" }}

repositories {
  mavenRepo id: 'maven2-repository.dev.java.net', name: "Java.net Repository for Maven", urls: "http://download.java.net/maven/2"
}

uploadArchives {
  repositories.mavenDeployer {
    pom {
      project {
        repositories {
          repository {
            id = 'maven2-repository.dev.java.net'
            url = 'http://download.java.net/maven/2'
          }
        }
      }
      //name = 'sshDeployer' // optional
      configuration = configurations.deployerJars
      //repository(url: "scp://repository.ops4j.org/home/www/repository.ops4j.org/maven2/")
        repository(url: "dav:https://repository-streamflow.forge.cloudbees.com/release") {
            authentication(userName: deployUser, password: deployPassword )
        }
    }
  }
}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.api"))
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
  compile(project(":org.qi4j.libraries:org.qi4j.library.constraints"))
  compile(project(":org.qi4j.extensions:org.qi4j.extension.indexing-rdf"))
  compile(project(":org.qi4j.libraries:org.qi4j.library.rdf"))
  compile(project(":org.qi4j.libraries:org.qi4j.library.spring"))
  compile(project(":org.qi4j.tools:org.qi4j.tool.envisage"))
  compile(libraries.slf4j_api)

  compile "org.springframework:spring-webmvc:$springVersion"
  compile "org.springframework:spring-orm:$springVersion"
  compile "org.springframework:spring-jdbc:$springVersion"
  compile "org.springframework:spring-aop:$springVersion"
  compile "org.springframework:spring-jms:$springVersion"

  compile "org.hibernate:hibernate:3.2.5.ga"
  compile "org.hibernate:hibernate-annotations:3.3.0.ga"
  compile "org.hibernate:hibernate-commons-annotations:3.3.0.ga"

  compile "commons-lang:commons-lang:2.4"
  compile "commons-io:commons-io:1.4"
  compile "commons-dbcp:commons-dbcp:1.2.2"

  compile "hsqldb:hsqldb:1.8.0.7"
  compile "javax.jms:jms:1.1"
  compile "javax.servlet:servlet-api:2.5"
  compile "javax.servlet:jstl:1.1.2"
  compile "taglibs:standard:1.1.2"
  compile "org.slf4j:slf4j-simple:$slf4jVersion"
  compile "javax.jws:jsr181-api:1.0-MR1"

  compile( "commons-logging:commons-logging:1.1" ) {
    exclude module: 'avalon-framework:avalon-framework'
    exclude module: 'logkit:logkit'
  }

  compile( "org.apache.activemq:activemq-core:5.3.0" ) {
    exclude module: 'org.apache.activemq:activeio-core'
    exclude module: 'javax.xml:jaxb-api'
  }

  compile( "org.jvnet.jax-ws-commons.spring:jaxws-spring:1.8" ) {
    exclude module: 'streambuffer'
    exclude module: 'spring'
    exclude module: 'stax-ex'
    exclude module: 'activation'
  }

  runtime "opensymphony:sitemesh:2.4.1"
  runtime "com.sun.xml.ws:jaxws-rt:2.2"
  runtime "com.sun.istack:istack-commons-runtime:2.2"

  runtime( "org.jvnet.staxex:stax-ex:1.2" ) {
    exclude module: 'activation'
  }

  runtime( "com.sun.xml.stream.buffer:streambuffer:0.8" ) {
    exclude module: 'activation'
  }

  testCompile(libraries.junit)
  testCompile(libraries.easymock)
  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
  testCompile "org.springframework:spring-test:$springVersion"

  testRuntime(libraries.asm)
  testRuntime(libraries.asm_commons)
  testRuntime(libraries.slf4j_simple)
  testRuntime(project(":org.qi4j.core:org.qi4j.core.spi"))
  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
}

